/*============================================================================
  Ajax the add to cart experience by revealing it in a side drawer
  Plugin Documentation - http://shopify.github.io/Timber/#ajax-cart
  (c) Copyright 2015 Shopify Inc. Author: Carson Shold (@cshold). All Rights Reserved.

  This file includes:
    - Basic Shopify Ajax API calls
    - Ajax cart plugin

  This requires:
    - jQuery 1.8+
    - handlebars.min.js (for cart template)
    - modernizer.min.js
    - snippet/ajax-cart-template.liquid

  Customized version of Shopify's jQuery API
  (c) Copyright 2009-2015 Shopify Inc. Author: Caroline Schnapp. All Rights Reserved.
==============================================================================*/
var Shopify = Shopify || {};
// ---------------------------------------------------------------------------
// Money format handler
// ---------------------------------------------------------------------------
Shopify.money_format = "${{amount}}";
Shopify.formatMoney = function(cents, format) {
  if (typeof cents == 'string') { cents = cents.replace('.',''); }
  var value = '';
  var placeholderRegex = /\{\{\s*(\w+)\s*\}\}/;
  var formatString = (format || this.money_format);

  function defaultOption(opt, def) {
    return (typeof opt == 'undefined' ? def : opt);
  }

  function formatWithDelimiters(number, precision, thousands, decimal) {
    precision = defaultOption(precision, 2);
    thousands = defaultOption(thousands, ',');
    decimal   = defaultOption(decimal, '.');

    if (isNaN(number) || number == null) { return 0; }

    number = (number/100.0).toFixed(precision);

    var parts   = number.split('.'),
        dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
        cents   = parts[1] ? (decimal + parts[1]) : '';

    return dollars + cents;
  }

  switch(formatString.match(placeholderRegex)[1]) {
    case 'amount':
      value = formatWithDelimiters(cents, 2);
      break;
    case 'amount_no_decimals':
      value = formatWithDelimiters(cents, 0);
      break;
    case 'amount_with_comma_separator':
      value = formatWithDelimiters(cents, 2, '.', ',');
      break;
    case 'amount_no_decimals_with_comma_separator':
      value = formatWithDelimiters(cents, 0, '.', ',');
      break;
  }

  return formatString.replace(placeholderRegex, value);
};


if ((typeof ShopifyAPI) === 'undefined') { ShopifyAPI = {}; }

/*============================================================================
  API Helper Functions
==============================================================================*/
function attributeToString(attribute) {
  if ((typeof attribute) !== 'string') {
    attribute += '';
    if (attribute === 'undefined') {
      attribute = '';
    }
  }
  return jQuery.trim(attribute);
};

/*============================================================================
  API Functions
==============================================================================*/
ShopifyAPI.onCartUpdate = function(cart) {
  // alert('There are now ' + cart.item_count + ' items in the cart.');
};

ShopifyAPI.updateCartNote = function(note, callback) {
  var params = {
    type: 'POST',
    url: '/cart/update.js',
    data: 'note=' + attributeToString(note),
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

ShopifyAPI.onError = function(XMLHttpRequest, textStatus) {
  var data = eval('(' + XMLHttpRequest.responseText + ')');
  //Do not throw 'cannot update empty cart' error.
  //It results only from clicking the '-' sign too much
  if (!!data.message && data.message != 'cannot update empty cart') {
    alert(data.message + '(' + data.status  + '): ' + data.description);
  }
};

/*============================================================================
  POST to cart/add.js returns the JSON of the cart
    - Allow use of form element instead of just id
    - Allow custom error callback
==============================================================================*/
ShopifyAPI.addItemFromForm = function(form, callback, errorCallback) {
  var params = {
    type: 'POST',
    url: '/cart/add.js',
    data: jQuery(form).serialize(),
    dataType: 'json',
    success: function(line_item) {
      if ((typeof callback) === 'function') {
        callback(line_item, form);
      }
      else {
        ShopifyAPI.onItemAdded(line_item, form);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      if ((typeof errorCallback) === 'function') {
        errorCallback(XMLHttpRequest, textStatus);
      }
      else {
        ShopifyAPI.onError(XMLHttpRequest, textStatus);
      }
    }
  };
  jQuery.ajax(params);
};

// Get from cart.js returns the cart in JSON
ShopifyAPI.getCart = function(callback) {
  jQuery.getJSON('/cart.js', function (cart, textStatus) {
    if ((typeof callback) === 'function') {
      callback(cart);
    }
    else {
      ShopifyAPI.onCartUpdate(cart);
    }
  });
};

// POST to cart/change.js returns the cart in JSON
ShopifyAPI.changeItem = function(line, quantity, callback) {
  var params = {
    type: 'POST',
    url: '/cart/change.js',
    data: 'quantity=' + quantity + '&line=' + line,
    dataType: 'json',
    success: function(cart) {
      if ((typeof callback) === 'function') {
        callback(cart);
      }
      else {
        ShopifyAPI.onCartUpdate(cart);
      }
    },
    error: function(XMLHttpRequest, textStatus) {
      ShopifyAPI.onError(XMLHttpRequest, textStatus);
    }
  };
  jQuery.ajax(params);
};

/*============================================================================
  Ajax Shopify Add To Cart
==============================================================================*/
var ajaxCart = (function(module, $) {

  'use strict';

  // Public functions
  var init, loadCart, refreshCart, getCartCount;

  // Private general variables
  var settings, isUpdating, $body;

  // Private plugin variables
  var $formContainer, $addToCart, $cartCountSelector, $cartCostSelector, $cartContainer, $drawerContainer;

  // Private functions
  var updateCountPrice, updateCountItems, formOverride, itemAddedCallback, itemErrorCallback, cartUpdateCallback, cartUpdateCallbackAdded, buildCart, cartCallback, adjustCart, adjustCartCallback, createQtySelectors, qtySelectors, validateQty;

  /*============================================================================
    Initialise the plugin and define global options
  ==============================================================================*/
  init = function (options) {

    // Default settings
    settings = {
      formSelector       : 'form[action^="/cart/add"]',
      cartContainer      : '#CartContainer',
      addToCartSelector  : 'input[type="submit"]',
      cartCountSelector  : '.CartCount',
      cartCostSelector   : null,
      moneyFormat        : '${{amount}}',
      disableAjaxCart    : false,
      enableQtySelectors : true
    };

    // Override defaults with arguments
    $.extend(settings, options);

    // Select DOM elements
    $formContainer     = $(settings.formSelector);
    $cartContainer     = $(settings.cartContainer);
    $addToCart         = $formContainer.find(settings.addToCartSelector);
    $cartCountSelector = $(settings.cartCountSelector);
    $cartCostSelector  = $(settings.cartCostSelector);

    // General Selectors
    $body = $('body');

    // Track cart activity status
    isUpdating = false;

    // Setup ajax quantity selectors on the any template if enableQtySelectors is true
    if (settings.enableQtySelectors) {
      qtySelectors();
    }

    // Take over the add to cart form submit action if ajax enabled
    if (!settings.disableAjaxCart && $addToCart.length) {
      formOverride();
    }

    // Run this function in case we're using the quantity selector outside of the cart
    adjustCart();
  };

  loadCart = function () {
    $('body').addClass('drawer--is-loading');
    ShopifyAPI.getCart(cartUpdateCallback);
  };

  refreshCart = function () {
    ShopifyAPI.getCart(adjustCartCallback);
  };

  getCartCount = function () {
    ShopifyAPI.getCart(updateCountPrice);
  }

  // function declOfNum(n, titles) {
  //   // var cases = [2, 0, 1, 1, 1, 2];
  //   return titles[(n % 10 === 1 && n % 100 !== 11) ? 0 : n % 10 >= 2 && n % 10 <= 4 && (n % 100 < 10 || n % 100 >= 20) ? 1 : 2];
  // }

  var declOfNum = (function () {
    var cases = [2, 0, 1, 1, 1, 2];
    var declOfNumSubFunction = function (titles, number) {
      number = Math.abs(number);
      return titles[(number % 100 > 4 && number % 100 < 20) ? 2 : cases[(number % 10 < 5) ? number % 10 : 5]];
    }
    return function (_titles) {
      if (arguments.length === 1) {
        return function (_number) {
          return declOfNumSubFunction(_titles, _number)
        }
      } else {
        return declOfNumSubFunction.apply(null, arguments)
      }
    }
  })()

  updateCountItems = function(cart) {
    $('.ajaxcart_product-price-qty').each(function () {
      // var countN = parseInt($('.CartCount').text());
      var countTitle = declOfNum(['item', 'items', 'items'], $(this).attr('data-count'));
      $(this).text($(this).attr('data-count') + ' ' + countTitle);
    });
  }

  updateCountPrice = function (cart) {
    if(cart.item_count > 0) {
      $('.CartCount').each(function () {
        $(this).html(cart.item_count);

        // var countN = parseInt($('.CartCount').text());
        var countTitle = declOfNum(['item', 'items', 'items'], cart.item_count);
        $('.cart-count-title').text(countTitle);
      });

      if (cart.item_count == 0) {
        $('.cart-btn').removeClass('cart-btn--fill');
        $('.cart-btn__count').hide();

        $('.header__cart-btn').removeClass('header__cart-btn--filled');

      } else {
        $('.cart-btn').addClass('cart-btn--fill');
        $('.cart-btn__count').show();

        $('.header__cart-btn').addClass('header__cart-btn--filled');
      }
    }
  };

  formOverride = function () {
    $(document).on('click', '#AddToCart', function(evt) {
      evt.preventDefault();
      $formContainer.trigger('ajaxCart')
    })

    $formContainer.on('ajaxCart', function(evt) {
      // evt.preventDefault();

      // Add class to be styled if desired7
      $addToCart.removeClass('is-added').addClass('is-adding');

      // Remove any previous quantity errors
      $('.qty-error').remove();

      ShopifyAPI.addItemFromForm(evt.target, itemAddedCallback, itemErrorCallback);
    });
  };

  itemAddedCallback = function (product) {
    $addToCart.removeClass('is-adding').addClass('is-added');

    ShopifyAPI.getCart(cartUpdateCallbackAdded);
    window.localStorage.setItem('cartStart', Math.floor(Date.now() / 1000))
  };

  itemErrorCallback = function (XMLHttpRequest, textStatus) {
    var data = eval('(' + XMLHttpRequest.responseText + ')');
    $addToCart.removeClass('is-adding is-added');

    if (!!data.message) {
      if (data.status == 422) {
        $('.variants-wrapper').after('<div class="errors qty-error">'+ data.description +'</div>')
      }
    }
  };

  cartUpdateCallback = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);
    buildCart(cart);
  };
  cartUpdateCallbackAdded = function (cart) {
    // Update quantity and price
    updateCountPrice(cart);

    var discountProduct = '{{ settings.discount_product }}';
    if(cart.total_price >= 40000 && discountProduct.length > 1) {
      $('.discount__wrap').addClass('active');
      $('html, body').addClass('muted');
    }
    setTimeout(function() {
      $('.product__form .product__add').removeClass('is-added');
    }, 3000)
  };

  buildCart = function (cart) {
    // Start with a fresh cart div
    $cartContainer.empty();

    // Show empty cart
    if (cart.item_count === 0) {
      $cartContainer
          .append('<div class="cart-empty"><p>' + {{ 'cart.general.empty' | t | json }} + '</p></div>');
      $cartContainer.addClass('cart-empty');
      cartCallback(cart);
      return;
    }

    // Handlebars.js cart layout
    var items = [],
        item = {},
        data = {},
        source = $("#CartTemplate").html(),
        template = Handlebars.compile(source);

    // Add each item to our handlebars.js data
    $.each(cart.items, function(index, cartItem) {
      /* Hack to get product image thumbnail
       *   - If image is not null
       *     - Remove file extension, add _small, and re-add extension
       *     - Create server relative link
       *   - A hard-coded url of no-image
      */
      if (cartItem.image != null){
        // var prodImg = cartItem.image.replace(/(\.[^.]*)$/, "_240x240.jpg").replace('http:', '');

        var prodImgFormatArray = cartItem.image.match(/(\.[^.]*)$/g),
            prodImgFormat = '_300x300' + prodImgFormatArray[prodImgFormatArray.length - 1],
            prodImg = cartItem.image.replace(/(\.[^.]*)$/, prodImgFormat).replace('http:', '');
      } else {
        var prodImg = "//cdn.shopify.com/s/assets/admin/no-image-medium-cc9732cb976dd349a0df1d39816fbcc7.gif";
      }

      // var sizePosition = null,
      //     size = null;
      // for (var i in Shopify.allProducts) {
      //   if (Shopify.allProducts[i].handle == cartItem.handle) {
      //     if (Shopify.allProducts[i].options.indexOf('Size') != -1) {
      //       sizePosition = Shopify.allProducts[i].options.indexOf('Size');
      //       size = cartItem.variant_options[sizePosition];
      //     } else if (Shopify.allProducts[i].options.indexOf('size') != -1) {
      //       sizePosition = Shopify.allProducts[i].options.indexOf('size');
      //       size = cartItem.variant_options[sizePosition];
      //     }
      //   }
      // }

      // Create item's data object and add to 'items' array
      item = {
        id: cartItem.variant_id,
        line: index + 1, // Shopify uses a 1+ index in the API
        url: cartItem.url,
        img: prodImg,
        name: cartItem.product_title,
        variation: cartItem.variant_title,
        properties: cartItem.properties,
        size: cartItem.variant_options[0],
        itemAdd: cartItem.quantity + 1,
        itemMinus: cartItem.quantity - 1,
        itemQty: cartItem.quantity,
        price: Shopify.formatMoney(cartItem.final_price, settings.moneyFormat),
        vendor: cartItem.vendor,
      };

      for(var prop in cartItem.properties) {
        if(prop == 'ComparePrice') {
          item.comparePrice = Shopify.formatMoney(cartItem.properties[prop], settings.moneyFormat);
        }
      }

      items.push(item);
    });

    // Gather all cart data and add to DOM
    data = {
      items: items,
      note: cart.note,
      totalPrice: Shopify.formatMoney(cart.total_price, settings.moneyFormat)
    }

    $cartContainer.removeClass('cart-empty');
    $cartContainer.append(template(data));

    cartCallback(cart);
  };

  cartCallback = function(cart) {
    $body.removeClass('drawer--is-loading');
    $body.addClass('ajax-cart-active');
    $body.trigger('ajaxCart.afterCartLoad', cart);
    var hasRc = false
    if($('.ajaxcart__item-wrap')) {
      $('.ajaxcart__product-name').find('span').each(function() {
        if($(this).text().includes('Monthly payments') || $(this).text().includes('Auto renew')) {
          $('.cart__checkout.btn').attr('href', 'https://checkout.rechargeapps.com/r/checkout?myshopify_domain=clio-goldbrenner-sa.myshopify.com&cart_token=' + ( document.cookie.match('(^|; )cart=([^;]*)') || 0 )[2])
          hasRc = true;
        }
      })
      if(hasRc == true) {
        $('.ajaxcart__checkout-btn--rc').css('display', 'block');
        $('.ajaxcart__checkout-btn--default').hide();
      }
      else {
        $('.ajaxcart__checkout-btn--rc').css('display', 'none');
        $('.ajaxcart__checkout-btn--default').show();
      }
    }
    updateCountItems(cart);
  };

  adjustCart = function () {
    $body.off('click')

    // Delegate all events because elements reload with the cart

    // Add or remove from the quantity
    $body.on('click', '.ajaxcart__qty-adjust', function() {
      var $el = $(this),
          line = $el.data('line'),
          $qtySelector = $el.siblings('.ajaxcart__qty-num'),
          qty = parseInt($qtySelector.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // Add or subtract from the current quantity
      if ($el.hasClass('ajaxcart__qty--plus')) {
        qty += 1;
      } else {
        qty -= 1;
        if (qty <= 0) qty = 0;
      }

      // If it has a data-line, update the cart.
      // Otherwise, just update the input's number
      if (line) {
        updateQuantity(line, qty);
      } else {
        $qtySelector.val(qty);
      }
    });

    $body.on('click', '.btn--remove', function() {
      var  line = $(this).data('line');
      removeItem(line);
    });

    $body.on('click', '.ajax-cart-overlay', function(e) {
      e.preventDefault();
      $body.removeClass('ajax-cart-active');
      $('body').removeClass('scroll-lock');
      $('body').removeClass('ajax-cart-active');
      $('.header__cart').removeClass('active');
      $('.header__cart').removeClass('js-drawer-close');
    });

    // Update quantity based on input on change
    $body.on('change', '.ajaxcart__qty-num', function() {
      var $el = $(this),
          line = $el.data('line'),
          qty = parseInt($el.val().replace(/\D/g, ''));

      var qty = validateQty(qty);

      // If it has a data-line, update the cart
      if (line) {
        updateQuantity(line, qty);
      }
    });

    // Prevent cart from being submitted while quantities are changing
    $body.on('submit', 'form.ajaxcart', function(evt) {
      if (isUpdating) {
        evt.preventDefault();
      }
    });

    // Highlight the text when focused
    $body.on('focus', '.ajaxcart__qty-adjust', function() {
      var $el = $(this);
      setTimeout(function() {
        $el.select();
      }, 50);
    });

    function updateQuantity(line, qty) {
      isUpdating = true;

      // Add activity classes when changing cart quantities
      var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');

      if (qty === 0) {
        $row.parent().addClass('is-removed');
      }

      // Slight delay to make sure removed animation is done
      setTimeout(function() {
        ShopifyAPI.changeItem(line, qty, adjustCartCallback);
      }, 250);
    }

    function removeItem(line) {
      var $row = $('.ajaxcart__row[data-line="' + line + '"]').addClass('is-loading');
      $row.parent().addClass('is-removed');

      setTimeout(function() {
        ShopifyAPI.changeItem(line, 0, adjustCartCallback);
      }, 250);
    }


    // Save note anytime it's changed
    $body.on('change', 'textarea[name="note"]', function() {
      var newNote = $(this).val();

      // Update the cart note in case they don't click update/checkout
      ShopifyAPI.updateCartNote(newNote, function(cart) {});
    });
  };

  adjustCartCallback = function (cart) {
    isUpdating = false;

    // Update quantity and price
    updateCountPrice(cart);

    // Reprint cart on short timeout so you don't see the content being removed
    setTimeout(function() {
      ShopifyAPI.getCart(buildCart);
    }, 150)
  };

  createQtySelectors = function() {
    // If there is a normal quantity number field in the ajax cart, replace it with our version
    if ($('input[type="number"]', $cartContainer).length) {
      $('input[type="number"]', $cartContainer).each(function() {
        var $el = $(this),
            currentQty = $el.val();

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#AjaxQty").html(),
            template = Handlebars.compile(source),
            data = {
              id: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      });
    }
  };

  qtySelectors = function() {
    // Change number inputs to JS ones, similar to ajax cart but without API integration.
    // Make sure to add the existing name and id to the new input element
    var numInputs = $('input[type="number"]');

    if (numInputs.length) {
      numInputs.each(function() {
        var $el = $(this),
            currentQty = $el.val(),
            inputName = $el.attr('name'),
            inputId = $el.attr('id');

        var itemAdd = currentQty + 1,
            itemMinus = currentQty - 1,
            itemQty = currentQty;

        var source   = $("#JsQty").html(),
            template = Handlebars.compile(source),
            data = {
              id: $el.data('id'),
              itemQty: itemQty,
              itemAdd: itemAdd,
              itemMinus: itemMinus,
              inputName: inputName,
              inputId: inputId
            };

        // Append new quantity selector then remove original
        $el.after(template(data)).remove();
      });

      // Setup listeners to add/subtract from the input
      $('.js-qty__adjust').on('click', function() {
        var $el = $(this),
            id = $el.data('id'),
            $qtySelector = $el.siblings('.js-qty__num'),
            qty = parseInt($qtySelector.val().replace(/\D/g, ''));

        var qty = validateQty(qty);

        // Add or subtract from the current quantity
        if ($el.hasClass('js-qty__adjust--plus')) {
          qty += 1;
        } else {
          qty -= 1;
          if (qty <= 1) qty = 1;
        }

        // Update the input's number
        $qtySelector.val(qty);

        // Trigger change
        $qtySelector.trigger('change');

        $('.button-update').trigger('click');
      });
    }
  };

  validateQty = function (qty) {
    if((parseFloat(qty) == parseInt(qty)) && !isNaN(qty)) {
      // We have a valid number!
    } else {
      // Not a number. Default to 1.
      qty = 1;
    }
    return qty;
  };

  function closeDiscount() {
    $('.discount__wrap').removeClass('active')
    $('body, html').removeClass('muted')
  }

  $('.discount__close, .discount__cancel').click(function() {
    closeDiscount();
  })

  // $(document).on('click', '.discount__wrap', function(e) {
  //   if(!$(e.target).closest('.discount__inner').length) {
  //     closeDiscount();
  //   }
  // })

  $('.discount__swatch-element').click(function(e) {
    e.preventDefault();
    $('.discount__swatch-element.selected').removeClass('selected');
    $(this).addClass('selected');
    $('.discount__product-img').attr('src', $(this).find('label').attr('data-image'));
    $('.discount__product-img').attr('srcset', $(this).find('label').attr('data-srcset'));
  })

  $('.discount__product-add').click(function() {
    let id = $('.discount__swatch').find('.selected').attr('data-id');
    $.ajax({
      type: 'POST',
      url: '/cart/add.js',
      data: {
        quantity: 1,
        id: id
      },
      success: function(data) {
        setTimeout(function() {
          window.location.replace('/checkout');
        }, 10)
      },
      error: function (jqXHR, exception) {
        var msg = '';
        if (jqXHR.status === 0) {
          msg = 'Not connect.\n Verify Network.';
        } else if (jqXHR.status == 404) {
          msg = 'Requested page not found. [404]';
        } else if (jqXHR.status == 500) {
          msg = 'Internal Server Error [500].';
        } else if (exception === 'parsererror') {
          msg = 'Requested JSON parse failed.';
        } else if (exception === 'timeout') {
          msg = 'Time out error.';
        } else if (exception === 'abort') {
          msg = 'Ajax request aborted.';
        } else {
          msg = 'Uncaught Error.\n' + jqXHR.responseText;
        }
        console.log(msg)
      },
    })
  })


  module = {
    init: init,
    load: loadCart,
    refresh: refreshCart,
    count: getCartCount,
  };

  $(document).on('click', '.js-drawer-close', function (e) {
    e.preventDefault()
    $('body').removeClass('ajax-cart-active')
    $('.header__cart').removeClass('active')
    $('.header__cart').removeClass('js-drawer-close')
  })

  $(document).on('click', '.header__cart:not(.active)', function (e) {
    e.preventDefault()
    window.ajaxCart.load()
  })

  return module;

}(ajaxCart || {}, jQuery));
